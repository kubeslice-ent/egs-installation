global:
  imageRegistry: harbor.saas1.smart-scaler.io/avesha/aveshasystems
  profile:
    openshift: false


operator:
  image: worker-operator-ent-egs
  tag: 1.15.2
  pullPolicy: IfNotPresent
  logLevel: INFO
  env:
    - name: DCGM_EXPORTER_JOB_NAME
      value: gpu-metrics   
  labels:
    control-plane: controller-manager
  annotations:
    kubectl.kubernetes.io/default-container: manager
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: 
    runAsUser: 65536               # Non-root user
    runAsGroup: 65536              # Non-root group
    runAsNonRoot: true             # Ensure the container does not run as root
    seccompProfile:
      type: RuntimeDefault
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  tolerations:
    - operator: "Exists"
  affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"
  excludeNamespaces:
  - "kube-system"
  - "default"
  - "kubeslice-controller"
  - "kubeslice-system"
  - "kube-node-lease"
  - "kube-public"
  - "istio-system"

controllerSecretName: kubeslice-hub #default name used if not specify any name
## Base64 encoded secret values from controller cluster
controllerSecret:
  namespace:
  endpoint:
  ca.crt:
  token:

cluster:
  name:
  nodeIp: # This field is deprecated. You can set nodeIPs through cluster spec.
  endpoint:

router:
  image: cmd-nse-vl3
  tag: 1.0.6
  pullPolicy: IfNotPresent                                                                                     

routerSidecar:
  image: kubeslice-router-sidecar
  tag: 1.4.6
  pullPolicy: IfNotPresent

gateway:
  image: gw-sidecar
  tag: 1.0.5
  pullPolicy: IfNotPresent
  logLevel: INFO

gatewayEdge:
  image: slicegw-edge
  tag: 1.0.6

openvpn:
  server:
    image: openvpn-server.alpine
    tag: 1.0.4
    pullPolicy: IfNotPresent
  client:
    image: openvpn-client.alpine
    tag: 1.0.4 
    pullPolicy: IfNotPresent

wireguard:
  server:
    image: wireguard-server.alpine
    tag: 1.0.0
    pullPolicy: IfNotPresent
  client:
    image: wireguard-client.alpine
    tag: 1.0.0
    pullPolicy: IfNotPresent

dns:
  image: dns
  tag: 0.1.4
  pullPolicy: IfNotPresent
  service: 
    type: ClusterIP
  labels:
    app: kubeslice-dns
  annotations: {}
  containerSecurityContext: {}
    # runAsUser: 65536
    # runAsGroup: 65536
    # runAsNonRoot: true
    # seccompProfile:
    #   type: RuntimeDefault
    # allowPrivilegeEscalation: false
    # capabilities:
    #   drop:
    #     - ALL
    # readOnlyRootFilesystem: true
  podSecurityContext: {}
    # runAsUser: 65536               # Non-root user
    # runAsGroup: 65536              # Non-root group
    # runAsNonRoot: true             # Ensure the container does not run as root
    # seccompProfile:
    #   type: RuntimeDefault
  resources:
    requests:
      cpu: 10m
      memory: 64Mi
    limits:
      cpu: 50m
      memory: 128Mi
  tolerations:
    - key: "kubeslice.io/node-type"
      operator: "Equal"
      value: "gateway"
      effect: "NoSchedule"
    - key: "kubeslice.io/node-type"
      operator: "Equal"
      value: "gateway"
      effect: "NoExecute"
  affinity:
    nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubeslice.io/node-type
                operator: In
                values:
                - gateway

envoy:
  gateway:
    image: envoygateway
    tag: v1.0.3
  proxy:
    image: envoyproxy-distroless
    tag: 1.30.4

istio:
  proxy:
    image: proxyv2
    tag: 1.16.1

aiops:
  image: kube-aiops-operator
  tag: 1.15.1
  pullPolicy: IfNotPresent
  logLevel: INFO
  labels:
    control-plane: aiops-controller-manager
  annotations:
    kubectl.kubernetes.io/default-container: manager
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 5m
      memory: 64Mi
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: 
    runAsUser: 65536               # Non-root user
    runAsGroup: 65536              # Non-root group
    runAsNonRoot: true             # Ensure the container does not run as root
    seccompProfile:
      type: RuntimeDefault
  tolerations:
    - operator: "Exists"
  affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"

egsAgent:
  image: egs-agent
  tag: 1.0.1
  pullPolicy: IfNotPresent
  logLevel: INFO
  secretName: egs-agent-access
  agentSecret:
    endpoint: ""
    key: ""
  labels:
    control-plane: egs-agent
  annotations: {}
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true
  podSecurityContext: 
    runAsUser: 65536               # Non-root user
    runAsGroup: 65536              # Non-root group
    runAsNonRoot: true             # Ensure the container does not run as root
    seccompProfile:
      type: RuntimeDefault
  resources:
    limits:
      cpu: 500m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 64Mi
  tolerations:
    - operator: "Exists"
  affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"

egs:
  prometheusEndpoint: ""
  grafanaDashboardBaseUrl: ""

workerInstaller:
  image: worker-installer
  tag: 1.8.0

jaeger:
  enabled: false

events:
  disabled: false

kserve:
  enabled: true
  # KServe chart options
  kserve:
    controller:
      gateway:
        domain: kubeslice.com
        ingressGateway:
          className: "nginx"

metrics:
  insecure: false
  metricResolution: "15s"
  imagePullPolicy: IfNotPresent

rbacproxy:
  # Image name for the RBAC proxy
  image: kubebuilder-kube-rbac-proxy
  # Image tag for the RBAC proxy
  tag: 0.18.2
  containerSecurityContext:
    runAsUser: 65536
    runAsGroup: 65536
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    readOnlyRootFilesystem: true

alpine:
  # Image name for the alpine
  image: alpine-k8s
  # Image tag for the alpine
  tag: 1.0.1

imagePullSecretsName: "kubeslice-image-pull-secret"
# leave the below fields empty if secrets are managed externally.
imagePullSecrets:
  repository: https://index.docker.io/v1/ ## Value to be used incase using the docker hub images-  https://index.docker.io/v1/
  username:
  password:
  email:
  dockerconfigjson: ## Value to be used if using external secret managers

controllerNamespace: kubeslice-controller

# enable/disable network component installation
kubesliceNetworking:
  enabled: true

nsm:
  spire:
    priorityClassName: ""
    spire-server:
      priorityClassName: ""
    spiffe-csi-driver:
      priorityClassName: ""
