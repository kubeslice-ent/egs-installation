---
apiVersion: apps/v1
kind: Deployment
metadata:
  {{- if .Values.egsAgent.labels }}
  labels:
  {{ toYaml .Values.egsAgent.labels | nindent 4 }}
  {{- end }}
  {{- if .Values.egsAgent.annotations }}
  annotations:
  {{ toYaml .Values.egsAgent.annotations | nindent 4 }}
  {{- end }}
  name: egs-agent
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
    {{- if .Values.egsAgent.labels }}
    {{ toYaml .Values.egsAgent.labels | nindent 6 }}
    {{- end }}
  template:
    metadata:
      annotations:
      {{- if .Values.egsAgent.annotations }}
      {{ toYaml .Values.egsAgent.annotations | nindent 8 }}
      {{- end }}
      {{- if .Values.egsAgent.labels }}
      labels:
      {{ toYaml .Values.egsAgent.labels | nindent 8 }}
      {{- end }}
    spec:
      {{- if .Values.egsAgent.affinity }}
      affinity:
      {{ toYaml .Values.egsAgent.affinity | nindent 8 }}
      {{- end }}
      volumes: # Add this section
        - name: tmp-volume
          emptyDir: {} # Creates a temporary, writable directory
      containers:
      - image: '{{ .Values.global.imageRegistry }}/{{ .Values.egsAgent.image }}:{{ .Values.egsAgent.tag }}'
        volumeMounts: # Add this section
          - name: tmp-volume
            mountPath: /tmp # Mounts the writable volume at /tmp      
        securityContext: 
        {{- if .Values.egsAgent.containerSecurityContext }}
        {{ toYaml .Values.egsAgent.containerSecurityContext | nindent 10 }}
        {{- end }}
        imagePullPolicy: "{{ .Values.egsAgent.pullPolicy }}"
        env:
          - name: LOG_LEVEL
            value: "{{ .Values.egsAgent.logLevel }}"
          - name: DEV_MODE
            value: "false"
          - name: API_GW_ENDPOINT
            valueFrom:
              secretKeyRef:
                name: {{ .Values.egsAgent.secretName }}
                key: API_GW_ENDPOINT
          - name: API_GW_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.egsAgent.secretName }}
                key: API_GW_KEY
          - name: CLUSTER_NAME
            value: {{ .Values.cluster.name }}
        livenessProbe:
          exec:
            command:
            - cat
            - /tmp/healthy.txt
          initialDelaySeconds: 5
          periodSeconds: 5
        name: main
        {{- if .Values.egsAgent.resources }}
        resources: {{ toYaml .Values.egsAgent.resources | nindent 10 }}
        {{- end }}
      securityContext:
      {{- if .Values.egsAgent.podSecurityContext }} 
      {{ toYaml .Values.egsAgent.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ .Values.egsAgent.secretName }}
      terminationGracePeriodSeconds: 10
      imagePullSecrets:
        - name: kubeslice-image-pull-secret
        # - name: kubeslice-aveshadev-secret
        # Allow this pod to be scheduled on nodes with any taints, as it is a critical component
        # and needs to tolerate all taints to ensure it can run on any available node.
      {{- if .Values.egsAgent.tolerations }}
      tolerations: 
      {{ toYaml .Values.egsAgent.tolerations | nindent 8 }}
      {{- end }}

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.egsAgent.secretName }}
  namespace: {{ .Release.Namespace }}
---
# permissions to do leader election.
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Values.egsAgent.secretName }}
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
      - update
      - patch
  - apiGroups:
      - ""
    resources:
      - namespaces
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Values.egsAgent.secretName }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Values.egsAgent.secretName }}
subjects:
  - kind: ServiceAccount
    name: {{ .Values.egsAgent.secretName }}
    namespace: {{ .Release.Namespace }}

---

---
apiVersion: v1
kind: Secret
metadata:
  name: {{ .Values.egsAgent.secretName }}
  namespace: kubeslice-system
data:
  {{- with .Values.egsAgent.agentSecret }}
    API_GW_ENDPOINT: {{ .endpoint | default "" | b64enc | quote }}
    API_GW_KEY: {{ .key | default "" | b64enc | quote }}
    API_GW_CA_CRT: {{ get . "ca.crt" | default "" | b64enc | quote }}
  {{- end }}
