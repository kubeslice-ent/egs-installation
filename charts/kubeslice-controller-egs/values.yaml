# Default values for k-native.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
global:
  imageRegistry: harbor.saas1.smart-scaler.io/avesha/aveshasystems
  # user can configure labels or annotations that EGS Controller namespaces should have
  namespaceConfig:
    labels: {}
    annotations: {}
  # Profile settings (e.g., for OpenShift)
  profile:
# if you're installing in openshift cluster make this variable true
    openshift: false
  kubeTally:
    # Enable or disable KubeTally
    enabled: false
    postgresSecretName: kubetally-db-credentials   # Default value, secret name can be overridden
    existingSecret: false                # Set to true if secret is pre-created externally
    # Ensure to configure the mandatory PostgreSQL database settings when 'kubetally enable' is true.
    postgresAddr:                         # Optional, can be specified here or retrieved from the secret
    postgresPort:                          # Optional, can be specified here or retrieved from the secret
    postgresUser:                        # Optional, can be specified here or retrieved from the secret
    postgresPassword:                     # Optional, can be specified here or retrieved from the secret
    postgresDB:                          # Optional, can be specified here or retrieved from the secret
    postgresSslmode: require            # optional, default: require other values: disable

    # Service type for price Service Type
    priceServiceType: ClusterIP

    # Number of workers for the price updater
    priceUpdaterWorkers: 5

    # Prometheus URL for monitoring(should be specified if needed)
    prometheusUrl: http://prometheus-service:9090

    # Data processing time window (hours ago)
    dataProcessingHoursAgo: 720

    # Schedule for the pricing updater (cron expression)
    pricingUpdaterSchedule: 0 0 1 * *
    
    # updates price for listed cloud providers
    pricingUpdaterCloudProviders: "aws,linode"

kubeslice:
  # Configuration for the RBAC proxy
  rbacproxy:
    # Image name for the RBAC proxy
    image: kubebuilder-kube-rbac-proxy
    # Image tag for the RBAC proxy
    tag: 0.18.2
    containerSecurityContext:
      runAsUser: 65536
      runAsGroup: 65536
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true

  # Configuration for the OpenVPN job
  ovpnJob:
    # Image name for the gateway certificates generator
    image: gateway-certs-generator
    # Image tag for the gateway certificates generator
    tag: 0.8.0

  # Configuration for the KubeSlice controller
  controller:
    # Log level for the controller
    logLevel: info
    # Inventory manager service address
    invmgrGrpcAddress: egs-inventory-manager:80
    # Prefix for RBAC resources created by KubeSlice
    rbacResourcePrefix: kubeslice-rbac
    # Prefix for project namespaces created by KubeSlice
    projectnsPrefix: kubeslice
    # Endpoint for the controller (should be specified if needed)
    endpoint: ""
    # Image name for the KubeSlice controller
    image: kubeslice-controller-ent-egs
    # Image tag for the KubeSlice controller
    tag: 1.15.3
    # Image pull policy for the KubeSlice controller
    pullPolicy: IfNotPresent
    # Configuration for kubeTally, which handles chargeback and metrics
    kubeTally:
      # Interval for cleaning up metrics when a worker cluster stops communicating
      metricsCleanupInterval: 15m
    # Configuration for replication using MinIO
    replication:
      # Image name for MinIO
      image: minio
      # Image tag for MinIO
      tag: RELEASE.2025-09-07T16-13-09Z-cpuv1
      # Configuration for MinIO
      minio:
        # Whether to install MinIO
        install: "true"
        # Storage size for MinIO
        storage: 1Gi
        # Username for MinIO
        username: minioadmin
        # Password for MinIO
        password: minioadmin
        # service options
        service:
          # minio service type
          type: "LoadBalancer"
          # minio service annotations
          annotations: { }
        labels:
          app: minio
    labels:
      control-plane: controller-manager
    annotations:
        kubectl.kubernetes.io/default-container: manager
        prometheus.io/port: "18080"
        prometheus.io/scrape: "true"
    containerSecurityContext:
      runAsUser: 65536
      runAsGroup: 65536
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
    podSecurityContext: 
      runAsUser: 65536               # Non-root user
      runAsGroup: 65536              # Non-root group
      runAsNonRoot: true             # Ensure the container does not run as root
      seccompProfile:
        type: RuntimeDefault
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 250m
        memory: 256Mi
    tolerations:
    - operator: "Exists"
    affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"


  # Configuration for events
  events:
    # Whether events are disabled
    disabled: true

egs:
  gprManager:
    # Image name for the gpr-manager
    image: gpr-manager
    # Image tag for the gpr-manager
    tag: 1.14.2
    imagePullPolicy: IfNotPresent
    # Period for checking if there is queue processing needed (in seconds)
    qmgrCheckPeriod: 60
    # Number of times a GPR can be delayed if there is not enough inventory
    maxDelayedCount: 10
    # Period for refreshing the GPRs
    refreshWaitTimeInterval: 300
    labels:
      control-plane: gpr-controller-manager
    annotations:
      kubectl.kubernetes.io/default-container: manager
    containerSecurityContext: 
      runAsUser: 65536
      runAsGroup: 65536
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
    podSecurityContext: 
      runAsUser: 65536               # Non-root user
      runAsGroup: 65536              # Non-root group
      runAsNonRoot: true             # Ensure the container does not run as root
      seccompProfile:
        type: RuntimeDefault
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
    tolerations:
    - operator: "Exists"
    affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"

  queueManager:
    # Image name for the queue-manager
    image: queue-manager
    # Image tag for the queue-manager
    tag: 1.13.2
    imagePullPolicy: IfNotPresent
    service:
      name: egs-queue-manager
      port: 80
    # turn off reflection
    appEnv: "production"
    labels:
      app: "queue-manager"
    annotations: {}
    containerSecurityContext: 
      runAsUser: 65536
      runAsGroup: 65536
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
    podSecurityContext:
      runAsUser: 65536               # Non-root user
      runAsGroup: 65536              # Non-root group
      runAsNonRoot: true             # Ensure the container does not run as root
      seccompProfile:
        type: RuntimeDefault
    resources: {}
    tolerations:
    - operator: "Exists"
    affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"

  inventory:
    # Image name for inventory-manager
    image: inventory-manager
    # Image tag for inventory-manager
    tag: 1.14.2
    imagePullPolicy: IfNotPresent
    logLevel: INFO
    service:
      name: egs-inventory-manager
      port: 80
    labels:
      control-plane: inventory-controller-manager
    annotations:
      kubectl.kubernetes.io/default-container: manager
    containerSecurityContext:
      runAsUser: 65536
      runAsGroup: 65536
      runAsNonRoot: true
      seccompProfile:
        type: RuntimeDefault
      allowPrivilegeEscalation: false
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
    podSecurityContext: 
      runAsUser: 65536               # Non-root user
      runAsGroup: 65536              # Non-root group
      runAsNonRoot: true             # Ensure the container does not run as root
      seccompProfile:
        type: RuntimeDefault
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 10m
        memory: 64Mi
    tolerations:
    - operator: "Exists"
    affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              preference:
                matchExpressions:
                  - key: "node.kubernetes.io/gpu"
                    operator: "DoesNotExist"                    

imagePullSecretsName: "kubeslice-image-pull-secret"
# leave the below fields empty if secrets are managed externally.
imagePullSecrets:
  repository: https://index.docker.io/v1/ ## Value to be used incase using the docker hub images-  https://index.docker.io/v1/
  username:
  password:
  email:
  dockerconfigjson: ## Value to be used if using external secret managers
